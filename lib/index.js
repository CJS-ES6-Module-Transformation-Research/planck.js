import { math as Mathjs } from "./common/Math";
import { Vec2 as Vec2_Vec2 } from "./common/Vec2";
import { Vec3 as Vec3_Vec3 } from "./common/Vec3";
import { Mat22 as Mat22_Mat22 } from "./common/Mat22";
import { Mat33 as Mat33_Mat33 } from "./common/Mat33";
import { Transform as Transform_Transform } from "./common/Transform";
import { Rot as Rot_Rot } from "./common/Rot";
import { AABB as AABB_AABB } from "./collision/AABB";
import { Shape as Shape_Shape } from "./Shape";
import { Fixture as Fixture_Fixture } from "./Fixture";
import { Body as Body_Body } from "./Body";
import { Contact as Contact_Contact } from "./Contact";
import { Joint as Joint_Joint } from "./Joint";
import { World as World_World } from "./World";
import { CircleShape as CircleShapejs } from "./shape/CircleShape";
import { EdgeShape as EdgeShapejs } from "./shape/EdgeShape";
import { PolygonShape as PolygonShapejs } from "./shape/PolygonShape";
import { ChainShape as ChainShapejs } from "./shape/ChainShape";
import { BoxShape as BoxShapejs } from "./shape/BoxShape";
import { CollidePolygons as CollidePolygon_CollidePolygons } from "./shape/CollidePolygon";
import { DistanceJoint as DistanceJoint_DistanceJoint } from "./joint/DistanceJoint";
import { FrictionJoint as FrictionJoint_FrictionJoint } from "./joint/FrictionJoint";
import { GearJoint as GearJoint_GearJoint } from "./joint/GearJoint";
import { MotorJoint as MotorJoint_MotorJoint } from "./joint/MotorJoint";
import { MouseJoint as MouseJoint_MouseJoint } from "./joint/MouseJoint";
import { PrismaticJoint as PrismaticJoint_PrismaticJoint } from "./joint/PrismaticJoint";
import { PulleyJoint as PulleyJoint_PulleyJoint } from "./joint/PulleyJoint";
import { RevoluteJoint as RevoluteJoint_RevoluteJoint } from "./joint/RevoluteJoint";
import { RopeJoint as RopeJoint_RopeJoint } from "./joint/RopeJoint";
import { WeldJoint as WeldJoint_WeldJoint } from "./joint/WeldJoint";
import { WheelJoint as WheelJoint_WheelJoint } from "./joint/WheelJoint";
import { Sweep as Sweep_Sweep } from "./common/Sweep";
import { statsjs } from "./common/stats";
import { Manifold as Manifold_Manifold } from "./Manifold";
import { Distance as Distance_Distance } from "./collision/Distance";
import { TimeOfImpact as TimeOfImpact_TimeOfImpact } from "./collision/TimeOfImpact";
import { DynamicTree as DynamicTree_DynamicTree } from "./collision/DynamicTree";
import { Settings as Settings_Settings } from "./Settings";
import "./shape/CollideCircle";
import "./shape/CollideEdgeCircle";
import "./shape/CollideCirclePolygone";
import "./shape/CollideEdgePolygon";
var mod_indexjs = {};
mod_indexjs.internal = {};

mod_indexjs.Math = Mathjs;
mod_indexjs.Vec2 = Vec2_Vec2;
mod_indexjs.Vec3 = Vec3_Vec3;
mod_indexjs.Mat22 = Mat22_Mat22;
mod_indexjs.Mat33 = Mat33_Mat33;
mod_indexjs.Transform = Transform_Transform;
mod_indexjs.Rot = Rot_Rot;

mod_indexjs.AABB = AABB_AABB;

mod_indexjs.Shape = Shape_Shape;
mod_indexjs.Fixture = Fixture_Fixture;
mod_indexjs.Body = Body_Body;
mod_indexjs.Contact = Contact_Contact;
mod_indexjs.Joint = Joint_Joint;
mod_indexjs.World = World_World;

mod_indexjs.Circle = CircleShapejs;
mod_indexjs.Edge = EdgeShapejs;
mod_indexjs.Polygon = PolygonShapejs;
mod_indexjs.Chain = ChainShapejs;
mod_indexjs.Box = BoxShapejs;

mod_indexjs.internal.CollidePolygons = CollidePolygon_CollidePolygons;

mod_indexjs.DistanceJoint = DistanceJoint_DistanceJoint;
mod_indexjs.FrictionJoint = FrictionJoint_FrictionJoint;
mod_indexjs.GearJoint = GearJoint_GearJoint;
mod_indexjs.MotorJoint = MotorJoint_MotorJoint;
mod_indexjs.MouseJoint = MouseJoint_MouseJoint;
mod_indexjs.PrismaticJoint = PrismaticJoint_PrismaticJoint;
mod_indexjs.PulleyJoint = PulleyJoint_PulleyJoint;
mod_indexjs.RevoluteJoint = RevoluteJoint_RevoluteJoint;
mod_indexjs.RopeJoint = RopeJoint_RopeJoint;
mod_indexjs.WeldJoint = WeldJoint_WeldJoint;
mod_indexjs.WheelJoint = WheelJoint_WheelJoint;

mod_indexjs.internal.Sweep= Sweep_Sweep;
mod_indexjs.internal.stats = statsjs;
mod_indexjs.internal.Manifold = Manifold_Manifold;
mod_indexjs.internal.Distance = Distance_Distance;
mod_indexjs.internal.TimeOfImpact = TimeOfImpact_TimeOfImpact;
mod_indexjs.internal.DynamicTree = DynamicTree_DynamicTree;
mod_indexjs.internal.Settings = Settings_Settings;
export { mod_indexjs as indexjs };
